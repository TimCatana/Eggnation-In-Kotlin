package com.applicnation.eggnation.feature_eggnation.data.remote.firebase

import android.util.Log
import com.applicnation.eggnation.feature_eggnation.domain.modal.User
import com.applicnation.eggnation.feature_eggnation.domain.modal.WonPrize
import com.applicnation.eggnation.util.Constants
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.FirebaseFirestoreException
import kotlinx.coroutines.tasks.await
import timber.log.Timber
import java.lang.Exception
import kotlin.collections.ArrayList

// TODO - check that scopes are working properly by logging the scope
// TODO - need to refactor this because coroutines are used differently in compose
class Firestore {
    private val firestore = FirebaseFirestore.getInstance()

    /**
     * Registers the user to the FireStore database.
     * @param userInfo The User object
     * @param userId The User Id generated by Firebase Authentication. Used as the document name
     * @exception FirebaseFirestoreException This is the only exception Firestore can throw as of now (according to documentation)
     * @exception Exception All exceptions thrown from this catch block are UNEXPECTED
     * @note Firestore will use a cached local database if phone goes offline and then re-syncs the online database at a later date.
     *       Because of this, Firestore writes should never fail and thus, no expected exceptions should occur
     */
    suspend fun registerUser(userId: String, userInfo: User) {
        val userDocument = firestore.collection(Constants.USERS_COLLECTION).document(userId)

        try {
            userDocument.set(userInfo).await()

            Timber.i("SUCCESS: User added to firestore database")
            // TODO - probably add a test prize (like a 30% off promo code to my Mynza store?) as a first prize to the prize collection. This ensures that the prize collection exists. Probably add the prize on first tap
            // TODO - send message to UI saying registered successfully (via boolean)
        } catch (e: FirebaseFirestoreException) {
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again, delete user from Firebase Authentication
            Timber.e("Failed to add user to firestore: An unexpected FIRESTORE error occurred --> $e")
        } catch (e: Exception) {
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again, delete user from Firebase Authentication
            Timber.e("Failed to add user to firestore: An unexpected error occurred --> $e")
        }
    }

    /**
     * Adds a prize to the user's account
     * @param userId The uid of the user used to add the prize to the correct account in firestore
     * @param prizeId The unique id of the prize won
     * @param prizeTitle The title of the prize
     * @param prizeDesc The description of the prize
     * @param prizeTier The tier of the prize
     * @note prizeDateWon in prize object will default to current time
     * @note prizeClaimed in prize object will default to false
     * @exception FirebaseFirestoreException This is the only exception Firestore can throw as of now (according to documentation)
     * @exception Exception All exceptions thrown from this catch block are UNEXPECTED
     */
    suspend fun addWonPrizeToUserAccount(
        userId: String,
        prizeId: String,
        prizeTitle: String,
        prizeDesc: String,
        prizeTier: String,
    ) {
        val prizeDocument = firestore.collection(Constants.USERS_COLLECTION)
            .document(userId)
            .collection(Constants.WON_PRIZE_COLLECTION)
            .document(prizeId)

        val prize = WonPrize().apply {
            this.prizeId = prizeId
            this.prizeTitle = prizeTitle
            this.prizeDesc = prizeDesc
            this.prizeTier = prizeTier
        }

        try {
            prizeDocument.set(prize).await()
            // TODO - send true success boolean.
        } catch (e: FirebaseFirestoreException) {
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again... rip
            Timber.e("Failed to add prize to firestore: An unexpected FIRESTORE error occurred --> $e")
        } catch (e: Exception) {
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again... rip
            Timber.e("Failed to add prize to firestore: An unexpected error occurred --> $e")
        }
    }

    /**
     * Gets the list of all won prizes for the user's account
     * @param userId The user's user ID (usually always from Firebase auth). documents are named after the user's uid
     * @exception FirebaseFirestoreException This is the only exception Firestore can throw as of now (according to documentation)
     * @exception Exception All exceptions thrown from this catch block are UNEXPECTED
     * // TODO - there may also be other specific exceptions thrown, but I think I only need to tell the user that it failed to fetch
     * // TODO - the specific error catch blocks are used to make debugging easier when there is a problem
     * @return ArrayList<WonPrize> The list of won prizes
     * // TODO maybe paginate prizes? But probably not cause no one should have like 100 prizes at any given moment in time
     */
    suspend fun getAllWonPrizes(userId: String): ArrayList<WonPrize> {
        val prizesCollection = firestore.collection(Constants.USERS_COLLECTION).document(userId)
            .collection(Constants.WON_PRIZE_COLLECTION)

        val prizeList = ArrayList<WonPrize>()

        try {
            val prizesSnapshot = prizesCollection.get().await()

            prizesSnapshot.forEach {
                val prize = it.toObject(WonPrize::class.java)
                prizeList.add(prize)
            }

            return prizeList
        } catch (e: FirebaseFirestoreException) {
            // TODO - maybe throw an exception?
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again... rip
            Timber.e("Failed to add prize to firestore: An unexpected FIRESTORE error occurred --> $e")
            throw Exception()
        } catch (e: Exception) {
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again... rip
            Timber.e("Failed to add prize to firestore: An unexpected error occurred --> $e")
            throw Exception()
        }
    }

    /**
     * Gets a specific won prize for the user's account by it's prizeId
     * @param userId The user's user ID (usually always from Firebase auth). user documents are named after the user's uid
     * @param prizeId The prize's prize ID (I will always have gotten a list of all prizes before I get a specific prize. Each prize
     *                document has the prizeId contained inside it, and that is where I get the ID from). prize documents are names
     *                after the prize's id
     * @exception FirebaseFirestoreException This is the only exception Firestore can throw as of now (according to documentation)
     * @exception Exception All exceptions thrown from this catch block are UNEXPECTED
     * // TODO - there may also be other specific exceptions thrown, but I think I only need to tell the user that it failed to fetch
     * // TODO - the specific error catch blocks are used to make debugging easier when there is a problem
     */
    suspend fun getWonPrizeById(userId: String, prizeId: String): WonPrize {
        val prizeDocument = firestore.collection(Constants.USERS_COLLECTION).document(userId)
            .collection(Constants.WON_PRIZE_COLLECTION).document(prizeId)

        try {
            val prizeSnapshot = prizeDocument.get().await()
            val prize = prizeSnapshot.toObject(WonPrize::class.java)

            if (prize != null) {
                return prize
            } else {
                throw Exception()
                // TODO throw exception or something?
            }

        } catch (e: FirebaseFirestoreException) {
            // TODO - maybe throw an exception?
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again... rip
            Timber.e("Failed to add prize to firestore: An unexpected FIRESTORE error occurred --> $e")
            throw Exception()
        } catch (e: Exception) {
            Timber.e("Failed to get prize $prizeId from $userId account from firestore: An unexpected error occurred --> $e")
            throw Exception()
        }
    }

    /**
     * Updates the user email in firestore
     * @param userId The user's user ID (usually always from Firebase auth). user documents are named after the user's uid
     * @param newEmail The new email the email field should be updated to
     * @exception FirebaseFirestoreException This is the only exception Firestore can throw as of now (according to documentation)
     * @exception Exception All exceptions thrown from this catch block are UNEXPECTED
     * // TODO - there may also be other specific exceptions thrown, but I think I only need to tell the user that it failed to fetch
     * // TODO - the specific error catch blocks are used to make debugging easier when there is a problem
     */
    suspend fun updateUserEmail(userId: String, newEmail: String) {
        val userDocument = firestore.collection(Constants.USERS_COLLECTION).document(userId)

        try {
            userDocument.update(Constants.USER_EMAIL_FIELD, newEmail).await()
        } catch (e: FirebaseFirestoreException) {
            // TODO - maybe throw an exception?
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again... rip
            Timber.e("Failed to add prize to firestore: An unexpected FIRESTORE error occurred --> $e")
            throw Exception()
        } catch (e: Exception) {
            Timber.e("Failed to update user emaul in firestore: An unexpected error occurred --> $e")
        }
    }

    /**
     * Updates the user username in firestore
     * @param userId The user's user ID (usually always from Firebase auth). user documents are named after the user's uid
     * @param newUsername The new username the email field should be updated to
     * @exception FirebaseFirestoreException This is the only exception Firestore can throw as of now (according to documentation)
     * @exception Exception All exceptions thrown from this catch block are UNEXPECTED
     * // TODO - there may also be other specific exceptions thrown, but I think I only need to tell the user that it failed to fetch
     * // TODO - the specific error catch blocks are used to make debugging easier when there is a problem
     */
    suspend fun UpdateUserUsername(userId: String, newUsername: String) {
        val userDocument = firestore.collection(Constants.USERS_COLLECTION).document(userId)

        try {
            userDocument.update(Constants.USER_USERNAME_FIELD, newUsername).await()
        } catch (e: FirebaseFirestoreException) {
            // TODO - maybe throw an exception?
            // TODO - propogate error via a boolean. If failed, retry this function. if failed again... rip
            Timber.e("Failed to add prize to firestore: An unexpected FIRESTORE error occurred --> $e")
            throw Exception()
        } catch (e: Exception) {
            Timber.e("Failed to update user emaul in firestore: An unexpected error occurred --> $e")
        }
    }

    // TODO will probably delete the user account using a cloud function. The docs reccommend using a cloud function plus client side deletions are a secutiry hazard
    suspend fun deleteUser() {
        try {

        } catch (e: Exception) {

        }
    }



//    fun getCurrentUserId(): String {
//        val currentUser = FirebaseAuth.getInstance().currentUser
//        return currentUser?.uid ?: ""
//    }

}


// If you want to use cloud storage
//fun uploadImageToCloudStorage(activity: Activity, imageFileURI: Uri?) {
//    val sRef: StorageReference = FirebaseStorage.getInstance.reference.child(
//        COnstants.USER_PROFILE_IMAGE + System.currentTimMillis() + "." + Constrants.getFileExtension(activity, imageFileURI)
//    )

//sRef.putFile(imageFileUri!!)
//.addOnSuccessListener { task ->
//
//    Log(task.metadata!!.reference!!.downloadUrl.toString())
//
//    it.metadata!!.reference!!.downoadUrl.addOnSuccessListener {uri -> Log(uri.tostring)}
//
//}
//.addOnFailureListener { e ->
//
//    when (activity) {
//        is <activituyName -> {do something}
//    }
//
//    Log(activity.javaClass.simplename, e.message, e)
//}
//}
