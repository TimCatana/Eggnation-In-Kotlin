package com.applicnation.eggnation.feature_eggnation.domain.use_case.user_use_case.user_account_use_case

import com.applicnation.eggnation.feature_eggnation.domain.modal.User
import com.applicnation.eggnation.feature_eggnation.domain.repository.AuthenticationRepository
import com.applicnation.eggnation.feature_eggnation.domain.repository.DatabaseRepository
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException
import com.google.firebase.auth.FirebaseAuthUserCollisionException
import com.google.firebase.auth.FirebaseAuthWeakPasswordException
import com.google.firebase.firestore.FirebaseFirestoreException
import timber.log.Timber
import javax.inject.Inject

class SignUpUserUC @Inject constructor(
    private val authenticator: AuthenticationRepository,
    private val repository: DatabaseRepository
) {

    // TODO - fix up documentation a bit

//    /**
//     * Registers the user to the FireStore database.
//     * @param userInfo The User object
//     * @param userId The User Id generated by Firebase Authentication. Used as the document name
//     * @exception FirebaseFirestoreException This is the only exception Firestore can throw as of now (according to documentation)
//     * @exception Exception All exceptions thrown from this catch block are UNEXPECTED
//     * @note Firestore will use a cached local database if phone goes offline and then re-syncs the online database at a later date.
//     *       Because of this, Firestore writes should never fail and thus, no expected exceptions should occur
//     */

    /**
     * Creates a new account for the user.
     * Adds the user to firebase auth console
     * @param email (String) The user email (should be valid and sanitized by now)
     * @param password (String) The user password (should be valid and sanitized by now)
     *                 should be greater than 8 characters contain lowercase letters, uppercase letters and numbers. Should contain no whitespace
     * @exception FirebaseAuthInvalidCredentialsException The email address is malformed SHOULD NEVER BE THROWN!!! (because the string should already have been sanitized and validated in frontend)
     * @exception FirebaseAuthWeakPasswordException The use password is less that 6 chars. SHOULD NEVER BE THROWN!!! (because the string should already have been sanitized and validated in frontend)
     * @exception FirebaseAuthUserCollisionException The user already exists (the email is already in use)
     * @exception Exception All exceptions caught in this block are UNEXPECTED and should not ever exist
     */
    suspend operator fun invoke(email: String, password: String, username: String) {
        // TODO - send a something to UI saying success or failure

        try {
            authenticator.signUpUser(email, password)
            Timber.i("SUCCESS: User signed up (registered)")
        } catch (e: FirebaseAuthInvalidCredentialsException) {
            Timber.wtf("Failed to sign user up (register): Email is malformed --> $e")
        } catch (e: FirebaseAuthWeakPasswordException) {
            Timber.wtf("Failed to sign user up (register): Weak Password (needs to be greater than 6 characters) --> $e")
        } catch (e: FirebaseAuthUserCollisionException) {
            Timber.e("Failed to sign user up (register): User already exists: --> $e ")
        } catch (e: Exception) {
            Timber.wtf("Failed to sign user up (register): An unexpected error occurred --> $e")
        }



        // TODO - need to fix database registration prcess this up a bit
        // TODO - if firebase registration fails, delete the user from authentication cause the game won't work without the user registered in the database

        val userId = authenticator.getUserId()


        try {
            repository.registerUser(userId!!, email, username) // TODO - fix this dangerous !!
            Timber.i("SUCCESS: User added to firestore database")

        } catch (e: FirebaseFirestoreException) {
            Timber.e("Failed to add user to firestore: An unexpected FIRESTORE error occurred --> $e")
        } catch (e: Exception) {
            Timber.e("Failed to add user to firestore: An unexpected error occurred --> $e")
        }
    }
}
